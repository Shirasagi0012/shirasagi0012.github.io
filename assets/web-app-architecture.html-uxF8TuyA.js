import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as n,o as l}from"./app-trUxzGO8.js";const e="/assets/image5-2-COJJTqmz.png",h="/assets/image5-7-Bo3qcRjt.png",t="/assets/image5-8-DGu67Uwy.png",p="/assets/1_r07lGAMKgdo2EPSNghMlqQ-Ca8cuX36.webp",k={};function r(d,s){return l(),a("div",null,s[0]||(s[0]=[n('<h1 id="web应用架构" tabindex="-1"><a class="header-anchor" href="#web应用架构"><span>Web应用架构</span></a></h1><h2 id="传统三层架构" tabindex="-1"><a class="header-anchor" href="#传统三层架构"><span>传统三层架构</span></a></h2><figure><img src="'+e+`" alt="image5-2" tabindex="0" loading="lazy"><figcaption>image5-2</figcaption></figure><p>传统三层架构将Web应用分为三层：</p><ul><li><strong>表现层</strong>（UI，User Interface）：这一层负责接受用户的请求，并且将数据或者对应的网页返回给用户的浏览器。 <ul><li>对于前后端一体的MVC架构的应用而言，View和Controller均属于该层。</li><li>如果你的Web应用只是一个对外提供服务的WebAPI，那么API Controller属于该层。</li></ul></li><li><strong>业务逻辑层</strong>（BLL，Business Logic Layer）：这一层负责执行业务逻辑。所有和你业务相关的逻辑都应该在这一层。</li><li><strong>数据访问层</strong>/持久化层（DAL，Data Access Layer）：这一层负责向其它层提供数据，以及将产生/修改的数据持久化。数据库是最常见的数据持久化手段，而与数据库打交道的代码应该在这一层。</li></ul><p>它们三者之间存在明确的依赖关系，表现层依赖于业务逻辑层，业务逻辑层依赖于数据访问层。这样分层遵循了<strong>关注点分离</strong>的原则，每一层都专注于某一项任务，有助于使代码井然有序。</p><h3 id="简化的项目结构" tabindex="-1"><a class="header-anchor" href="#简化的项目结构"><span>简化的项目结构</span></a></h3><p>以下是一个简化的三层架构项目结构：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>WebApplication.csproj</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── Controllers/                # 表现层：控制器</span></span>
<span class="line"><span>│   ├── HomeController.cs</span></span>
<span class="line"><span>│   ├── UserController.cs</span></span>
<span class="line"><span>│   └── ProductController.cs</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── Views/                      # 表现层：视图</span></span>
<span class="line"><span>│   ├── Home/</span></span>
<span class="line"><span>│   │   ├── Index.cshtml</span></span>
<span class="line"><span>│   │   └── About.cshtml</span></span>
<span class="line"><span>│   ├── User/</span></span>
<span class="line"><span>│   │   ├── Login.cshtml</span></span>
<span class="line"><span>│   │   └── Register.cshtml</span></span>
<span class="line"><span>│   └── Product/</span></span>
<span class="line"><span>│       ├── List.cshtml</span></span>
<span class="line"><span>│       └── Details.cshtml</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── Models/                     # 数据模型</span></span>
<span class="line"><span>│   ├── User.cs</span></span>
<span class="line"><span>│   └── Product.cs</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── Services/                   # 业务逻辑层</span></span>
<span class="line"><span>│   ├── UserService.cs</span></span>
<span class="line"><span>│   └── ProductService.cs</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└── Data/                       # 数据访问层</span></span>
<span class="line"><span>    ├── Migrations/             # EF Core 迁移</span></span>
<span class="line"><span>    └── AppDbContext.cs         # 数据库上下文</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Controllers文件夹</strong>：包含所有控制器，负责处理HTTP请求并返回响应</li><li><strong>Views文件夹</strong>：包含所有视图，负责呈现用户界面</li><li><strong>Models文件夹</strong>：包含所有三层共享的数据模型。不过多数时候并不会共享数据模型，而是每层都有自己的数据模型，因为在不同层中，使用模型的目的也不同。比如表现层的视图模型/数据传输模型（ViewModel/DTOs），业务逻辑层的领域模型（Domain Model）</li><li><strong>Services文件夹</strong>：包含业务逻辑处理类</li><li><strong>Data文件夹</strong>：包含数据访问相关代码</li></ul><h3 id="面向接口编程" tabindex="-1"><a class="header-anchor" href="#面向接口编程"><span>面向接口编程</span></a></h3><p>目前，我们简单的三层架构中，每一层都直接依赖于下一层，这使得各层之间的耦合度较高，难以进行单元测试和维护。为了提高架构的灵活性和可扩展性，我们可以使用接口来将各层解耦。</p><p>面向接口编程是一种设计原则，强调&quot;依赖于抽象而非实现&quot;。在三层架构中应用这一原则，意味着各层之间通过接口而非具体实现类进行交互：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义业务逻辑层接口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IUserService</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    User</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetUserById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 更多方法...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 业务逻辑层实现</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 实现接口方法...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 控制器中使用接口而非具体实现</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Controller</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IUserService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        _userService</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IActionResult</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> _userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetUserById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 处理并返回结果...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="仓储模式" tabindex="-1"><a class="header-anchor" href="#仓储模式"><span>仓储模式</span></a></h3><p>前面演示了使用接口进行对业务逻辑层的抽象，接下来我们来对数据访问层进行抽象。我们使用<strong>Repository模式</strong>来实现这一点。</p><p>Repository模式是一种数据访问模式，它将数据访问逻辑封装在一个独立的类中，称为仓储（Repository）。仓储负责与数据源进行交互，并提供一个简单的接口供业务逻辑层使用。与直接在Service中使用EF Core上下文相比，Repository模式不仅使代码更易于测试和维护，还将数据访问技术的选择（如EF Core、Dapper）完全从业务逻辑中隔离出来，使技术迁移和架构演进变得更加顺畅。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义仓储接口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IUserRepository</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    User</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    IEnumerable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 仓储实现</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserRepository</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AppDbContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AppDbContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        _context</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 实现接口方法...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在业务逻辑层中使用仓储</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IUserRepository</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        _userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetUserById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> _userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 可以在这里添加业务逻辑...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 更多方法...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h4><p>面向接口编程与三层架构结合，可以解决刚才简单的三层架构的许多缺点：</p><ol><li><strong>解耦</strong>：通过接口，各层之间实现了更彻底的解耦，增强了可维护性和可测试性。</li><li><strong>依赖注入</strong>：结合依赖注入框架，可以在运行时动态替换各层的实现，提高灵活性。</li><li><strong>单元测试</strong>：可以轻松创建模拟对象(Mock)替代真实依赖，便于单元测试。</li><li><strong>数据访问抽象</strong>：Repository模式隐藏了数据访问的细节，使业务逻辑层不再依赖特定的数据库技术。也就是说，只要另一个数据持久化实现能实现<code>IRepository</code>接口，它就能无缝的替换原来的数据库实现。</li></ol><p>这种架构的演进是渐进式的，可以根据项目需求逐步从简单三层架构向更复杂、更灵活的架构过渡。在小型项目初期可以采用简单三层架构，随着项目的发展再引入接口和Repository模式，实现更高级的架构设计。</p><p><strong>在不停地重构中优化应用比一步到位来得更好</strong>，这样可以：</p><ul><li>避免<strong>过度设计</strong>导致的代码冗余，过早使用那些复杂的架构和设计模式反而会使代码难以维护。<strong>所有抽象都是有成本的</strong>（这里的成本指的是代码量，而不是说“零开销抽象”时的性能开销）。</li><li>使用简单的架构设计，快速地让应用的基本功能运行起来，而不是浪费时间在写各种接口和其它抽象上，导致项目迟迟不能上线。</li></ul><h2 id="整洁架构" tabindex="-1"><a class="header-anchor" href="#整洁架构"><span>整洁架构</span></a></h2><p>前面介绍了传统的三层架构，从最简单到逐步应用各种设计模式来解决它的一些不足。但是，它仍然存在很多问题：</p><ul><li>写着写着就成了以数据库为中心编程——因为数据访问层是逻辑上的最底层。</li><li>业务逻辑和数据访问逻辑混杂在业务逻辑层里</li><li>测试困难，尽管能通过面向接口降低代码的耦合度，但是逻辑上的依赖关系无法解决。测试业务逻辑必须Mock数据访问层。</li><li>业务逻辑复用困难</li></ul><p>其实以上几点都是由于业务逻辑层依赖于数据访问层导致的。我们编写应用是为了解决现实问题的，因此业务逻辑和模型才是一个应用最核心、最有价值的部分。整个应用都应该围绕着它们来构建。我们也将它们称作“领域（Domain）”。</p><p>整洁架构将应用的核心——领域，置于架构的正中心：</p><figure><img src="`+h+'" alt="image5-7" tabindex="0" loading="lazy"><figcaption>image5-7</figcaption></figure><p>原来的UI层，数据访问层都置于领域外侧。领域不依赖于它们，而是通过依赖倒置，只对外暴露接口。这样，使得应用核心与其余部分不存在代码上的依赖关系，进而大幅降低了为业务逻辑编写单元测试的难度。</p><p>并且UI层对Infrastructure没有任何直接依赖关系，同样，可轻松交换实现。比如，你可以在同一个应用核心上，同时维护一个WebAPI项目和一个Blazor项目，实现核心代码的100%复用。这也使得UI层能更容易地被测试和维护。</p><h3 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构"><span>项目结构</span></a></h3><p>整洁架构各个部分有非常明确的依赖关系，因此在使用整洁架构的应用中，通常会分为多个项目：</p><figure><img src="'+t+`" alt="image5-8" tabindex="0" loading="lazy"><figcaption>image5-8</figcaption></figure><p>应用以表示层为入口点，在其内部完成依赖注入容器的构建。</p><h4 id="应用程序核心-application-core" tabindex="-1"><a class="header-anchor" href="#应用程序核心-application-core"><span>应用程序核心（Application Core）</span></a></h4><p>应用程序核心是整洁架构中最重要的部分，它由两个主要部分组成：领域层（Domain Layer）和应用层（Application Layer）。</p><h5 id="领域层-domain-layer" tabindex="-1"><a class="header-anchor" href="#领域层-domain-layer"><span>领域层（Domain Layer）</span></a></h5><p>领域层是业务核心，包含所有与业务领域相关的概念、规则和逻辑。它是整个应用程序中最稳定、最不容易变化的部分。领域层主要包括以下组件：</p><ol><li><p><strong>实体（Entities）</strong>：代表业务中的核心概念，它们有身份标识，生命周期，并包含业务规则。例如<code>User</code>、<code>Order</code>、<code>Product</code>等。</p></li><li><p><strong>值对象（Value Objects）</strong>：没有身份标识的对象，通过其属性值来定义。它们通常是不可变的，例如<code>Money</code>、<code>Address</code>、<code>DateRange</code>等。</p></li><li><p><strong>领域服务（Domain Services）</strong>：处理那些不自然属于任何实体或值对象的业务逻辑，尤其是跨越多个实体的操作。</p></li><li><p><strong>领域事件（Domain Events）</strong>：用于捕获领域中发生的、对业务有意义的事件，促进领域对象间的松散耦合。</p></li></ol><h5 id="应用层-application-layer" tabindex="-1"><a class="header-anchor" href="#应用层-application-layer"><span>应用层（Application Layer）</span></a></h5><p>应用层作为领域层与外部系统（如UI和基础设施）之间的桥梁，协调领域对象完成用户的操作请求。应用层实现用例（Use Cases），但不包含业务规则，只是对领域层业务逻辑的编排，因此，这是比较单薄的一层，没有复杂的逻辑。它主要包括：</p><ol><li><p><strong>应用服务（Application Services）</strong>：这些服务协调领域对象以完成特定的应用任务或用例。它们通常不包含业务规则，而是委托给领域层。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderApplicationService</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOrderRepository</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _orderRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IProductRepository</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _productRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ICustomerRepository</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _customerRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IUnitOfWork</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _unitOfWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> async</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Guid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CreateOrderAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CreateOrderDto</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> createOrderDto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {...}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数据传输对象（DTOs，Data Transfer Objects）</strong>：用于在应用层与外部层之间传输数据的简单对象，它们不包含业务逻辑。</p></li><li><p><strong>接口抽象（Interfaces）</strong>：应用核心定义了它需要的外部服务的接口，而不依赖于具体实现。这是依赖倒置原则的体现。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义在核心层的接口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOrderRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {...}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IEmailService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {...}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h5 id="依赖倒置" tabindex="-1"><a class="header-anchor" href="#依赖倒置"><span>依赖倒置</span></a></h5><p>应用程序核心通过依赖倒置原则（Dependency Inversion Principle）实现对外部系统的解耦。核心原则是：</p><ol><li>高层模块不应依赖低层模块，两者都应依赖于抽象</li><li>抽象不应依赖于细节，细节应依赖于抽象</li></ol><p>在整洁架构中，这表现为：</p><ul><li>接口定义在核心层，由外层实现</li><li>核心层不依赖于任何具体技术实现</li><li>依赖注入在运行时将接口和实现关联起来</li></ul><p>例如，数据访问逻辑：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在核心层定义接口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IUserRepository</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetByIdAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IEnumerable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetAllAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Task</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AddAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在基础设施层实现接口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SqlServerUserRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserRepository</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AppDbContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _dbContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SqlServerUserRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AppDbContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> dbContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        _dbContext</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dbContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> async</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetByIdAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> await </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">_dbContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Users</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FindAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="应用程序核心与外部层的交互" tabindex="-1"><a class="header-anchor" href="#应用程序核心与外部层的交互"><span>应用程序核心与外部层的交互</span></a></h5><p>应用程序核心通过以下方式与外部层交互：</p><ol><li><p><strong>控制反转容器</strong>：在启动时配置依赖注入，将接口映射到具体实现</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddScoped</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SqlServerUserRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddScoped</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IEmailService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SmtpEmailService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddScoped</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>适配器模式</strong>：外部系统通过适配器模式实现核心定义的接口</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 适配第三方支付系统的适配器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StripePaymentAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IPaymentGateway</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StripeClient</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _stripeClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StripePaymentAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StripeOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        _stripeClient</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StripeClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ApiKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> async</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PaymentResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ProcessPaymentAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PaymentRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 将应用核心的PaymentRequest转换为Stripe特定格式</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> stripeOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PaymentIntentCreateOptions</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            Amount</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Amount</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            Currency</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Currency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ToLower</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            PaymentMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">PaymentMethodId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            Confirm</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> service</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PaymentIntentService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">_stripeClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> await </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CreateAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">stripeOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 将Stripe响应转换回应用核心的PaymentResult</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PaymentResult</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            Success</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Status</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;succeeded&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            TransactionId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            Message</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Status</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>应用程序核心的这种设计使得领域逻辑可以独立演化，业务规则不受技术实现的影响，并且便于测试。通过清晰地分离关注点，整洁架构能够创建出更加灵活、可维护且满足业务需求的软件系统。</p><h2 id="领域驱动设计介绍" tabindex="-1"><a class="header-anchor" href="#领域驱动设计介绍"><span>领域驱动设计介绍</span></a></h2><p>领域驱动设计（Domain-Driven Design，简称DDD）是一种软件开发方法论，它将重点放在核心领域和领域逻辑上，而不是技术细节。在这一点上类似于整洁架构，但是DDD不只是做到了<strong>分离关注点</strong>，还提供了一系列的概念、原则和模式，帮助开发人员有效地处理复杂系统中的领域复杂性。它特别适合于那些业务规则复杂、不断演进的企业级应用。</p><p>领域驱动设计值得拿出时间单独来讲，因此这一部分只会介绍一些相关的概念。</p><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><h4 id="什么是领域" tabindex="-1"><a class="header-anchor" href="#什么是领域"><span>什么是领域</span></a></h4><p>在DDD中，**领域（Domain）**指的是一个组织的业务范围，它包含所有与该业务相关的规则、流程和知识。例如，电子商务领域包括产品目录、订单处理、库存管理、支付处理等。</p><h4 id="领域模型" tabindex="-1"><a class="header-anchor" href="#领域模型"><span>领域模型</span></a></h4><p>**领域模型（Domain Model）**是对特定领域概念的抽象表示，它捕捉了领域专家关心的核心概念、术语和关系。领域模型不是数据库模型，也不是UI模型，而是对业务概念和规则的表达。</p><h4 id="限界上下文" tabindex="-1"><a class="header-anchor" href="#限界上下文"><span>限界上下文</span></a></h4><p>**限界上下文（Bounded Context）**是一个明确定义了模型适用范围的边界。在一个大型系统中，不同的部分可能有不同的模型和语言，限界上下文帮助我们明确这些边界，避免模型混淆。</p><p>例如，在一个电子商务系统中，&quot;产品&quot;在产品目录上下文和订单上下文中可能有不同的属性和行为。在产品目录上下文中，产品可能包含详细描述、图片、评价等信息；而在订单上下文中，产品可能只需要ID、名称和价格。</p><h4 id="通用语言" tabindex="-1"><a class="header-anchor" href="#通用语言"><span>通用语言</span></a></h4><p>**通用语言（Ubiquitous Language）**是DDD中最重要的概念之一。它是一种在团队内共享的语言，由领域专家和开发人员共同创建和使用，用于描述领域模型和业务规则。通用语言的目的是消除领域专家和技术团队之间的沟通障碍，确保大家对领域有共同的理解。</p><p>例如，在一个医疗系统中，&quot;患者&quot;、&quot;诊断&quot;、&quot;处方&quot;等词汇会有明确且共享的定义，并反映在代码、文档和团队讨论中。</p><h3 id="ddd的分层" tabindex="-1"><a class="header-anchor" href="#ddd的分层"><span>DDD的分层</span></a></h3><p>DDD建议将软件系统分为以下几层：</p><ol><li><strong>展示层（UI层）</strong>：负责向用户显示信息和解释用户指令</li><li><strong>应用层</strong>：协调领域对象完成工作，不包含业务规则</li><li><strong>领域层</strong>：包含业务概念、业务状态信息以及业务规则，是系统的核心</li><li><strong>基础设施层</strong>：提供通用的技术能力，支持上述层次的工作</li></ol><p>这种分层与整洁架构有很多相似之处，都强调业务逻辑是系统的核心，技术细节应该依赖于业务逻辑而不是相反。</p><figure><img src="`+p+'" alt="1_r07lGAMKgdo2EPSNghMlqQ" tabindex="0" loading="lazy"><figcaption>1_r07lGAMKgdo2EPSNghMlqQ</figcaption></figure><h3 id="ddd的战术设计-tactical-design" tabindex="-1"><a class="header-anchor" href="#ddd的战术设计-tactical-design"><span>DDD的战术设计（Tactical Design）</span></a></h3><p>战术设计关注的是单个限界上下文内部的细节设计，它提供了一系列模式来构建领域模型：</p><h4 id="实体" tabindex="-1"><a class="header-anchor" href="#实体"><span>实体</span></a></h4><p>**实体（Entity）**是有唯一标识的对象，即使它的属性发生变化，它仍然是同一个对象。例如，一个用户对象，即使用户修改了姓名、地址等信息，它仍然是同一个用户。</p><h4 id="值对象" tabindex="-1"><a class="header-anchor" href="#值对象"><span>值对象</span></a></h4><p>**值对象（Value Object）**是没有唯一标识的对象，它通过其属性值来定义。两个值对象如果所有属性相同，则认为它们相等。值对象通常是不可变的，这意味着创建后不能修改。</p><h4 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合"><span>聚合</span></a></h4><p><strong>聚合（Aggregate）<strong>是一组相关对象的集合，作为一个整体对待。每个聚合有一个</strong>根实体（Aggregate Root）</strong>，外部对象只能引用根实体，不能直接引用聚合内部的其他对象。聚合确保了业务规则的一致性。</p><h4 id="领域服务" tabindex="-1"><a class="header-anchor" href="#领域服务"><span>领域服务</span></a></h4><p>**领域服务（Domain Service）**处理那些不自然属于任何实体或值对象的领域逻辑。领域服务应该是无状态的，它往往涉及多个领域对象的操作。</p><h4 id="领域事件" tabindex="-1"><a class="header-anchor" href="#领域事件"><span>领域事件</span></a></h4><p>**领域事件（Domain Event）**是领域中发生的事情，这些事情对业务有意义，并且可能影响系统的状态。领域事件帮助我们实现松散耦合的系统。</p><h4 id="仓储模式-1" tabindex="-1"><a class="header-anchor" href="#仓储模式-1"><span>仓储模式</span></a></h4><p>**仓储（Repository）**提供了一种机制，使领域对象看起来就像是存储在内存集合中一样。它隐藏了数据访问的具体细节。</p><h3 id="何时使用ddd" tabindex="-1"><a class="header-anchor" href="#何时使用ddd"><span>何时使用DDD</span></a></h3><p>DDD并不适合所有项目。它最适合那些具有复杂领域且需要领域专家深度参与的项目。考虑在以下情况使用DDD：</p><ul><li>业务逻辑复杂</li><li>项目需要长期维护和演进</li><li>团队包括领域专家</li><li>需要准确捕捉业务规则和流程</li></ul><p>对于CRUD应用或业务逻辑简单的系统，DDD可能过于复杂，不值得投入所需的时间和精力。</p><h3 id="ddd与微服务" tabindex="-1"><a class="header-anchor" href="#ddd与微服务"><span>DDD与微服务</span></a></h3><p>DDD和微服务架构是天然匹配的。限界上下文可以作为划分微服务边界的指导原则。每个微服务可以实现一个或几个相关的限界上下文，拥有自己的数据存储和领域模型。</p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>领域驱动设计提供了一套强大的概念和工具，帮助我们应对复杂系统的挑战。通过将重点放在领域而不是技术上，DDD可以帮助我们构建更符合业务需求、更易于维护和演进的软件系统。在复杂业务场景下，DDD与整洁架构结合使用，可以创建出结构良好、可维护性高的应用程序。</p><p>正如我们之前强调的，应该根据项目的具体需求选择合适的设计方法。对于简单系统，传统三层架构可能已经足够；而对于复杂系统，整洁架构和DDD则提供了更好的解决方案。重要的是理解这些方法的核心原则，并灵活应用以满足你的特定需求。</p>',97)]))}const g=i(k,[["render",r],["__file","web-app-architecture.html.vue"]]),B=JSON.parse(`{"path":"/sast-csharp/web-app-architecture.html","title":"[SAST C#] Web应用架构","lang":"zh-CN","frontmatter":{"title":"[SAST C#] Web应用架构","license":"CC BY-SA 4.0 International","date":"2025-04-13T00:00:00.000Z","category":["NJUPT SAST 南邮校科协"],"tag":["C#",".NET","Web"],"description":"Web应用架构 传统三层架构 image5-2image5-2 传统三层架构将Web应用分为三层： 表现层（UI，User Interface）：这一层负责接受用户的请求，并且将数据或者对应的网页返回给用户的浏览器。 对于前后端一体的MVC架构的应用而言，View和Controller均属于该层。 如果你的Web应用只是一个对外提供服务的WebAPI，...","head":[["meta",{"property":"og:url","content":"https://blog.shirasagi.space/sast-csharp/web-app-architecture.html"}],["meta",{"property":"og:site_name","content":"Shirasagi's Blog"}],["meta",{"property":"og:title","content":"[SAST C#] Web应用架构"}],["meta",{"property":"og:description","content":"Web应用架构 传统三层架构 image5-2image5-2 传统三层架构将Web应用分为三层： 表现层（UI，User Interface）：这一层负责接受用户的请求，并且将数据或者对应的网页返回给用户的浏览器。 对于前后端一体的MVC架构的应用而言，View和Controller均属于该层。 如果你的Web应用只是一个对外提供服务的WebAPI，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-13T13:07:45.000Z"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":".NET"}],["meta",{"property":"article:tag","content":"Web"}],["meta",{"property":"article:published_time","content":"2025-04-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-13T13:07:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[SAST C#] Web应用架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-13T13:07:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Shirasagi\\",\\"url\\":\\"https://github.com/shirasagi0012\\"}]}"]]},"headers":[{"level":2,"title":"传统三层架构","slug":"传统三层架构","link":"#传统三层架构","children":[{"level":3,"title":"简化的项目结构","slug":"简化的项目结构","link":"#简化的项目结构","children":[]},{"level":3,"title":"面向接口编程","slug":"面向接口编程","link":"#面向接口编程","children":[]},{"level":3,"title":"仓储模式","slug":"仓储模式","link":"#仓储模式","children":[]}]},{"level":2,"title":"整洁架构","slug":"整洁架构","link":"#整洁架构","children":[{"level":3,"title":"项目结构","slug":"项目结构","link":"#项目结构","children":[]}]},{"level":2,"title":"领域驱动设计介绍","slug":"领域驱动设计介绍","link":"#领域驱动设计介绍","children":[{"level":3,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":3,"title":"DDD的分层","slug":"ddd的分层","link":"#ddd的分层","children":[]},{"level":3,"title":"DDD的战术设计（Tactical Design）","slug":"ddd的战术设计-tactical-design","link":"#ddd的战术设计-tactical-design","children":[]},{"level":3,"title":"何时使用DDD","slug":"何时使用ddd","link":"#何时使用ddd","children":[]},{"level":3,"title":"DDD与微服务","slug":"ddd与微服务","link":"#ddd与微服务","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]}],"git":{"createdTime":1744517983000,"updatedTime":1744549665000,"contributors":[{"name":"Shirasagi","username":"Shirasagi","email":"23011330+Shirasagi0012@users.noreply.github.com","commits":2,"url":"https://github.com/Shirasagi"}]},"readingTime":{"minutes":15.7,"words":4711},"filePathRelative":"sast-csharp/web-app-architecture.md","localizedDate":"2025年4月13日","excerpt":"\\n<h2>传统三层架构</h2>\\n<figure><figcaption>image5-2</figcaption></figure>\\n<p>传统三层架构将Web应用分为三层：</p>\\n<ul>\\n<li><strong>表现层</strong>（UI，User Interface）：这一层负责接受用户的请求，并且将数据或者对应的网页返回给用户的浏览器。\\n<ul>\\n<li>对于前后端一体的MVC架构的应用而言，View和Controller均属于该层。</li>\\n<li>如果你的Web应用只是一个对外提供服务的WebAPI，那么API Controller属于该层。</li>\\n</ul>\\n</li>\\n<li><strong>业务逻辑层</strong>（BLL，Business Logic Layer）：这一层负责执行业务逻辑。所有和你业务相关的逻辑都应该在这一层。</li>\\n<li><strong>数据访问层</strong>/持久化层（DAL，Data Access Layer）：这一层负责向其它层提供数据，以及将产生/修改的数据持久化。数据库是最常见的数据持久化手段，而与数据库打交道的代码应该在这一层。</li>\\n</ul>","autoDesc":true}`);export{g as comp,B as data};
