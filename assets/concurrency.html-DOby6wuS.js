import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as r,o as a}from"./app-trUxzGO8.js";const i={};function c(l,e){return a(),n("div",null,e[0]||(e[0]=[r('<h1 id="并发-concurrency" tabindex="-1"><a class="header-anchor" href="#并发-concurrency"><span>并发 Concurrency</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>内容来源于《OSTEP》Pt. 2 Concurrency, Ch. 25-34</p></div><h2 id="线程-thread" tabindex="-1"><a class="header-anchor" href="#线程-thread"><span>线程 Thread</span></a></h2><h3 id="与进程的关系" tabindex="-1"><a class="header-anchor" href="#与进程的关系"><span>与进程的关系</span></a></h3><p>线程和进程的状态非常相似：</p><ul><li><p>多线程程序会有多个执行点（多个程序计数器），而单线程程序只有一个执行点</p></li><li><p>多线程程序中每个线程共享内存地址空间，从而能访问相同的数据。</p></li><li><p>线程和进程都有自己的程序计数器，一组用于计算的寄存器。</p><p>因此线程切换和进程切换一样会发生类似的上下文切换。</p><ul><li>进程的上下文保存在进程控制块（Process Control Block）</li><li>线程的上下文保存在一个/多个线程控制块（Thread Control Block）</li></ul><p>由于共享内存地址空间，线程切换不需要切换页表。</p></li></ul><p>线程和进程的栈是主要区别之一：</p><ul><li>单线程应用中，只有一个栈，位于地址空间底部</li><li>多线程应用中，每个线程都有一个栈。</li></ul><p>线程中所有位于栈上的变量、参数、返回值等，被放在有时被称为<em>线程本地</em>（thread-local）<em>存储</em>的地方，即线程的栈</p><h3 id="线程的复杂性" tabindex="-1"><a class="header-anchor" href="#线程的复杂性"><span>线程的复杂性</span></a></h3><ul><li>线程的执行顺序和创建的先后顺序无关。</li><li>当多线程同时访问共享的数据时每次产生不同的结果。</li></ul><p>这是由于<em>不可控的调度</em>导致的。调度程序可以自由决定线程的执行顺序，你无法知晓线程何时会执行。</p><h4 id="竞态条件" tabindex="-1"><a class="header-anchor" href="#竞态条件"><span>竞态条件</span></a></h4><p>两个或者以上进程或者线程并发执行时，其最终的结果依赖于进程或者线程执行的精确时序。</p><p>因此每次执行都会得到不同的结果，是不确定的。</p><h4 id="临界区" tabindex="-1"><a class="header-anchor" href="#临界区"><span>临界区</span></a></h4><p>某段代码被多个线程同时执行可能会导致<strong>竞态条件</strong>，这些代码也被称作<strong>临界区</strong>。临界区是一段访问共享变量（或者其它共享资源）的代码，一定不能由多个线程同时执行。</p><h4 id="互斥" tabindex="-1"><a class="header-anchor" href="#互斥"><span>互斥</span></a></h4><p>保证一个线程在临界区执行时，其它线程被阻止进入临界区</p><h3 id="原子性" tabindex="-1"><a class="header-anchor" href="#原子性"><span>原子性</span></a></h3><p>即“作为一个单元”，没有中间态，要么“全部”，要么“没有”。</p><p>硬件会提供一些有用的指令，可以在这些指令上构建一个通用的集合，即所谓的同步原语。</p>',22)]))}const s=t(i,[["render",c],["__file","concurrency.html.vue"]]),h=JSON.parse(`{"path":"/computer-science/operating-system/concurrency.html","title":"并发 Concurrency","lang":"zh-CN","frontmatter":{"title":"并发 Concurrency","date":"2025-04-21T00:00:00.000Z","category":["计算机科学","操作系统"],"tags":["操作系统","计算机科学"],"description":"并发 Concurrency 提示 内容来源于《OSTEP》Pt. 2 Concurrency, Ch. 25-34 线程 Thread 与进程的关系 线程和进程的状态非常相似： 多线程程序会有多个执行点（多个程序计数器），而单线程程序只有一个执行点 多线程程序中每个线程共享内存地址空间，从而能访问相同的数据。 线程和进程都有自己的程序计数器，一组用于...","head":[["meta",{"property":"og:url","content":"https://blog.shirasagi.space/computer-science/operating-system/concurrency.html"}],["meta",{"property":"og:site_name","content":"Shirasagi's Blog"}],["meta",{"property":"og:title","content":"并发 Concurrency"}],["meta",{"property":"og:description","content":"并发 Concurrency 提示 内容来源于《OSTEP》Pt. 2 Concurrency, Ch. 25-34 线程 Thread 与进程的关系 线程和进程的状态非常相似： 多线程程序会有多个执行点（多个程序计数器），而单线程程序只有一个执行点 多线程程序中每个线程共享内存地址空间，从而能访问相同的数据。 线程和进程都有自己的程序计数器，一组用于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-21T02:55:16.000Z"}],["meta",{"property":"article:tag","content":"操作系统"}],["meta",{"property":"article:tag","content":"计算机科学"}],["meta",{"property":"article:published_time","content":"2025-04-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-21T02:55:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发 Concurrency\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-21T02:55:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Shirasagi\\",\\"url\\":\\"https://github.com/shirasagi0012\\"}]}"]]},"headers":[{"level":2,"title":"线程 Thread","slug":"线程-thread","link":"#线程-thread","children":[{"level":3,"title":"与进程的关系","slug":"与进程的关系","link":"#与进程的关系","children":[]},{"level":3,"title":"线程的复杂性","slug":"线程的复杂性","link":"#线程的复杂性","children":[]},{"level":3,"title":"原子性","slug":"原子性","link":"#原子性","children":[]}]}],"git":{"createdTime":1745192457000,"updatedTime":1745204116000,"contributors":[{"name":"Shirasagi","username":"Shirasagi","email":"23011330+Shirasagi0012@users.noreply.github.com","commits":3,"url":"https://github.com/Shirasagi"}]},"readingTime":{"minutes":2.11,"words":634},"filePathRelative":"computer-science/operating-system/concurrency.md","localizedDate":"2025年4月21日","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>内容来源于《OSTEP》Pt. 2 Concurrency, Ch. 25-34</p>\\n</div>\\n<h2>线程 Thread</h2>\\n<h3>与进程的关系</h3>\\n<p>线程和进程的状态非常相似：</p>\\n<ul>\\n<li>\\n<p>多线程程序会有多个执行点（多个程序计数器），而单线程程序只有一个执行点</p>\\n</li>\\n<li>\\n<p>多线程程序中每个线程共享内存地址空间，从而能访问相同的数据。</p>\\n</li>\\n<li>\\n<p>线程和进程都有自己的程序计数器，一组用于计算的寄存器。</p>\\n<p>因此线程切换和进程切换一样会发生类似的上下文切换。</p>\\n<ul>\\n<li>进程的上下文保存在进程控制块（Process Control Block）</li>\\n<li>线程的上下文保存在一个/多个线程控制块（Thread Control Block）</li>\\n</ul>\\n<p>由于共享内存地址空间，线程切换不需要切换页表。</p>\\n</li>\\n</ul>","autoDesc":true}`);export{s as comp,h as data};
