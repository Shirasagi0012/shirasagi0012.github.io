import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as n,o}from"./app-B56_FAaH.js";const t={};function c(a,e){return o(),d("div",null,e[0]||(e[0]=[n('<h1 id="深入-x-bind" tabindex="-1"><a class="header-anchor" href="#深入-x-bind"><span>深入<code>{x:Bind}</code></span></a></h1><p>在使用XAML描述界面的时候，我们使用数据绑定来实现View层和ViewModel层的解耦合。XAML提供了一些标记扩展（Markup Extension）,比如<code>{x:Bind}</code>、<code>{Binding}</code>、<code>{TemplatedBinding}</code>，借助它们，我们可以直接在XAML中轻松的描述一个数据到界面元素依赖属性的绑定关系。在WinUI 3/UWP中，我们可以同时使用以上三种绑定标记扩展，对于初学者而言很可能会引起不少疑惑。如果你接触过WPF，可能在初次使用<code>{x:Bind}</code>时会感觉熟悉而又陌生。</p><p><code>{x:Bind}</code>是伴随着WinRT XAML（也就是UWP、WinUI 3所使用的XAML）而诞生的。它旨在解决<code>{Binding}</code>的一些问题。<code>{x:Bind}</code>也拥有比<code>{Binding}</code>更丰富的特性，并且语法更简洁。</p><ul><li><code>{x:Bind}</code>支持使用一个函数作为绑定路径</li><li><code>{x:Bind}</code>支持绑定事件</li><li><code>{x:Bind}</code>是强类型的、静态的。</li><li><code>{x:Bind}</code>是编译期的绑定，在编译时生成对应的绑定代码。</li></ul><p>在使用<code>{Binding}</code>时，我们需要和数据上下文（<code>DataContext</code>）打交道。如果不设置正确的数据上下文，就会找不到对应的绑定元素和路径，导致绑定失败。</p><p>与<code>{Binding}</code>不同，<code>{x:Bind}</code>不需要、也不能设置数据上下文，因为<code>{x:Bind}</code>并不具有<code>{Bidning}</code>的动态性，无法在运行时判断某个数据上下文（是<code>Object</code>类型）里是否有需要绑定的元素。<code>{x:Bind}</code>将XAML根元素作为其查找元素和属性的根。</p>',6)]))}const s=i(t,[["render",c],["__file","binding-in-depth.html.vue"]]),l=JSON.parse(`{"path":"/winui-3/binding-in-depth.html","title":"深入{x:Bind}","lang":"zh-CN","frontmatter":{"description":"深入{x:Bind} 在使用XAML描述界面的时候，我们使用数据绑定来实现View层和ViewModel层的解耦合。XAML提供了一些标记扩展（Markup Extension）,比如{x:Bind}、{Binding}、{TemplatedBinding}，借助它们，我们可以直接在XAML中轻松的描述一个数据到界面元素依赖属性的绑定关系。在WinUI...","head":[["meta",{"property":"og:url","content":"https://blog.shirasagi.space/winui-3/binding-in-depth.html"}],["meta",{"property":"og:site_name","content":"Shirasagi's Blog"}],["meta",{"property":"og:title","content":"深入{x:Bind}"}],["meta",{"property":"og:description","content":"深入{x:Bind} 在使用XAML描述界面的时候，我们使用数据绑定来实现View层和ViewModel层的解耦合。XAML提供了一些标记扩展（Markup Extension）,比如{x:Bind}、{Binding}、{TemplatedBinding}，借助它们，我们可以直接在XAML中轻松的描述一个数据到界面元素依赖属性的绑定关系。在WinUI..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-01T06:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-01T06:17:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入{x:Bind}\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-01T06:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Shirasagi\\",\\"url\\":\\"https://github.com/shirasagi0012\\"}]}"]]},"headers":[],"git":{"createdTime":1740809827000,"updatedTime":1740809827000,"contributors":[{"name":"Shirasagi","username":"Shirasagi","email":"23011330+Shirasagi0012@users.noreply.github.com","commits":1,"url":"https://github.com/Shirasagi"}]},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"winui-3/binding-in-depth.md","localizedDate":"2025年3月1日","excerpt":"\\n<p>在使用XAML描述界面的时候，我们使用数据绑定来实现View层和ViewModel层的解耦合。XAML提供了一些标记扩展（Markup Extension）,比如<code>{x:Bind}</code>、<code>{Binding}</code>、<code>{TemplatedBinding}</code>，借助它们，我们可以直接在XAML中轻松的描述一个数据到界面元素依赖属性的绑定关系。在WinUI 3/UWP中，我们可以同时使用以上三种绑定标记扩展，对于初学者而言很可能会引起不少疑惑。如果你接触过WPF，可能在初次使用<code>{x:Bind}</code>时会感觉熟悉而又陌生。</p>","autoDesc":true}`);export{s as comp,l as data};
